---

- name: Create kickstart directory
  file:
    path: "{{ virt_guest_kickstart_config_dir }}"
    state: directory
    mode: 0700

- name: Check and wait to re-run if internal http server is still running
  wait_for:
    port: "{{ virt_guest_kickstart_config_port }}"
    timeout: "{{ virt_guest_kickstart_config_serve_timeout }}"
    state: stopped
    msg: "Port {{ virt_guest_kickstart_config_port }} is accessible, some application is still running and use it."

- name: Run internal http server for serving ks configuration on el7
  shell:
    cmd: "nohup timeout {{ virt_guest_kickstart_config_serve_timeout }} python -m SimpleHTTPServer >/dev/null 2>&1 &"
    chdir: "{{ virt_guest_kickstart_config_dir }}"
  when: ansible_distribution_major_version == "7"

- name: Run internal http server for serving ks configuration on el8
  shell:
    cmd: "nohup timeout {{ virt_guest_kickstart_config_serve_timeout }} python3 -m http.server >/dev/null 2>&1 &"
    chdir: "{{ virt_guest_kickstart_config_dir }}"
  when: ansible_distribution_major_version == "8"

- name: Insert a firewall rule for using ks configuration
  iptables:
    chain: INPUT
    protocol: tcp
    destination_port: "{{ virt_guest_kickstart_config_port }}"
    jump: ACCEPT
    action: insert
    rule_num: "1"

- name: Download vmlinuz to boot
  get_url:
    url: "{{ virt_guest_os_location }}/images/pxeboot/vmlinuz"
    dest: "/var/lib/libvirt/boot/virtguestinst-vmlinuz"
    force: yes

- name: Download initrd to boot
  get_url:
    url: "{{ virt_guest_os_location }}/images/pxeboot/initrd.img"
    dest: "/var/lib/libvirt/boot/virtguestinst-initrd.img"
    force: yes
