---

- name: Check if virtual machine(s) exists
  virt:
    command: list_vms
  register: result

- name: Create virtual machine(s)
  virt:
    name: "{{ item.key }}"
    command: define
    xml: "{{ lookup('template', 'vm-install-template.xml.j2') }}"
  loop: "{{ virt_guest_list|dict2items|json_query(jmesh_query) }}"
  when: not result.list_vms is search('{{ item.key }}')

- name: Start installation of virtual machine(s)
  virt:
    name: "{{ item.key }}"
    state: running
  loop: "{{ virt_guest_list|dict2items|json_query(jmesh_query) }}"
  loop_control:
    label: "{{ item.key }}"
  when: not result.list_vms is search('{{ item.key }}')

- name: Wait to finish installation
  virt:
    name: "{{ item.key }}"
    command: status
  register: vm
  until: vm.status == "shutdown"
  retries: 100
  delay: 10
  loop: "{{ virt_guest_list|dict2items|json_query(jmesh_query) }}"
  loop_control:
    label: "{{ item.key }}"
  when: not result.list_vms is search('{{ item.key }}')

- name: Undefine installation xml of virtual machine(s)
  virt:
    name: "{{ item.key }}"
    command: undefine
  loop: "{{ virt_guest_list|dict2items|json_query(jmesh_query) }}"
  loop_control:
    label: "{{ item.key }}"
  when: not result.list_vms is search('{{ item.key }}')

- name: Define non installation xml for virtual machine(s)
  virt:
    name: "{{ item.key }}"
    command: define
    xml: "{{ lookup('template', 'vm-template.xml.j2') }}"
  loop: "{{ virt_guest_list|dict2items|json_query(jmesh_query) }}"

- name: Start virtual machine(s)
  virt:
    name: "{{ item.key }}"
    state: running
  loop: "{{ virt_guest_list|dict2items|json_query(jmesh_query) }}"
  loop_control:
    label: "{{ item.key }}"

- name: Enable autostart for virtual machine(s)
  virt:
    name: "{{ item.key }}"
    command: status
    autostart: true
  loop: "{{ virt_guest_list|dict2items|json_query(jmesh_query) }}"
  loop_control:
    label: "{{ item.key }}"
