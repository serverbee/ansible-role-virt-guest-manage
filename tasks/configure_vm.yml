---

- name: Check if virtual machine(s) exists
  virt:
    command: list_vms
  register: result

- include_tasks: kickstart.yml
  loop: "{{ virt_guest_list|dict2items|json_query(jmesh_query) }}"
  loop_control:
    label: "{{ item.key }}"
  when: not result.list_vms is search('{{ item.key }}')
  vars:
    main_disk: "{{ item.value.disk | first }}"
    main_interface: "{{ item.value.network | first }}"

- name: Find temporary kickstart configuration
  find:
    paths: "{{ virt_guest_kickstart_config_dir }}"
    patterns: "*.cfg"
  register: ks_to_delete

- name: Remove temporary kickstart configuration
  file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ ks_to_delete.files }}"
  loop_control:
    label: "{{ item.path }}"
  when: ks_to_delete.files is defined

- name: Remove a firewall rule for using ks configuration
  iptables:
    chain: INPUT
    protocol: tcp
    destination_port: "{{ virt_guest_kickstart_config_port }}"
    jump: ACCEPT
    state: absent

- name: Define non installation xml for virtual machine(s)
  virt:
    name: "{{ item.key }}"
    command: define
    xml: "{{ lookup('template', 'vm-template.xml.j2') }}"
  loop: "{{ virt_guest_list|dict2items|json_query(jmesh_query) }}"
  vars:
    main_disk: "{{ item.value.disk | first }}"

- name: Start virtual machine(s)
  virt:
    name: "{{ item.key }}"
    state: running
  loop: "{{ virt_guest_list|dict2items|json_query(jmesh_query) }}"
  loop_control:
    label: "{{ item.key }}"

- name: Enable autostart for virtual machine(s)
  virt:
    name: "{{ item.key }}"
    command: status
    autostart: true
  loop: "{{ virt_guest_list|dict2items|json_query(jmesh_query) }}"
  loop_control:
    label: "{{ item.key }}"
  when: item.value.autostart|default(true)|bool
