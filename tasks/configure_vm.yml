---

- name: Check if virtual machine(s) exists
  virt:
    command: list_vms
  register: result

- block:
  - name: Create kickstart configuration
    template:
      src: vm-ks.cfg.j2
      dest: "{{ virt_guest_kickstart_config_dir }}/{{ item.key }}-ks.cfg"
    loop: "{{ virt_guest_list|dict2items|json_query(jmesh_query) }}"
    loop_control:
      label: "{{ item.key }}"

  - name: Run internal http server for serving ks configuration on el7
    shell:
      cmd: "nohup timeout {{ virt_guest_kickstart_serve_timeout }} python -m SimpleHTTPServer >/dev/null 2>&1 &"
      chdir: "{{ virt_guest_kickstart_config_dir }}"
    loop: "{{ virt_guest_list|dict2items|json_query(jmesh_query) }}"
    loop_control:
      label: "{{ item.key }}"
    when: ansible_distribution_major_version == "7"

  - name: Run internal http server for serving ks configuration on el8
    shell:
      cmd: "nohup timeout {{ virt_guest_kickstart_serve_timeout }} python3 -m http.server >/dev/null 2>&1 &"
      chdir: "{{ virt_guest_kickstart_config_dir }}"
    loop: "{{ virt_guest_list|dict2items|json_query(jmesh_query) }}"
    loop_control:
      label: "{{ item.key }}"
    when: ansible_distribution_major_version == "8"

  - name: Insert a firewall rule for using ks configuration
    iptables:
      chain: INPUT
      protocol: tcp
      destination_port: "{{ virt_guest_kickstart_config_port }}"
      jump: ACCEPT
      action: insert
      rule_num: 1
    loop: "{{ virt_guest_list|dict2items|json_query(jmesh_query) }}"
    loop_control:
      label: "{{ item.key }}"

  - name: Create virtual machine(s)
    virt:
      name: "{{ item.key }}"
      command: define
      xml: "{{ lookup('template', 'vm-install-template.xml.j2') }}"
    loop: "{{ virt_guest_list|dict2items|json_query(jmesh_query) }}"

  - name: Start installation of virtual machine(s)
    virt:
      name: "{{ item.key }}"
      state: running
    loop: "{{ virt_guest_list|dict2items|json_query(jmesh_query) }}"
    loop_control:
      label: "{{ item.key }}"

  - name: Wait to finish installation
    virt:
      name: "{{ item.key }}"
      command: status
    register: vm
    until: vm.status == "shutdown"
    retries: 100
    delay: 10
    loop: "{{ virt_guest_list|dict2items|json_query(jmesh_query) }}"
    loop_control:
      label: "{{ item.key }}"

  - name: Undefine installation xml of virtual machine(s)
    virt:
      name: "{{ item.key }}"
      command: undefine
    loop: "{{ virt_guest_list|dict2items|json_query(jmesh_query) }}"
    loop_control:
      label: "{{ item.key }}"

  when: not result.list_vms is search('{{ item.key }}')

- name: Find temporary kickstart configuration
  find:
    paths: "{{ virt_guest_kickstart_config_dir }}"
    patterns: "*.cfg"
  register: ks_to_delete

- name: Remove temporary kickstart configuration
  file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ ks_to_delete.files }}"
  loop_control:
    label: "{{ item.path }}"
  when: ks_to_delete.files is defined

- name: Remove a firewall rule for using ks configuration
  iptables:
    chain: INPUT
    protocol: tcp
    destination_port: "{{ virt_guest_kickstart_config_port }}"
    jump: ACCEPT
    state: absent

- name: Define non installation xml for virtual machine(s)
  virt:
    name: "{{ item.key }}"
    command: define
    xml: "{{ lookup('template', 'vm-template.xml.j2') }}"
  loop: "{{ virt_guest_list|dict2items|json_query(jmesh_query) }}"

- name: Start virtual machine(s)
  virt:
    name: "{{ item.key }}"
    state: running
  loop: "{{ virt_guest_list|dict2items|json_query(jmesh_query) }}"
  loop_control:
    label: "{{ item.key }}"

- name: Enable autostart for virtual machine(s)
  virt:
    name: "{{ item.key }}"
    command: status
    autostart: true
  loop: "{{ virt_guest_list|dict2items|json_query(jmesh_query) }}"
  loop_control:
    label: "{{ item.key }}"
